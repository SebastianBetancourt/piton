if False:
	"hola"
elif True and not(False):
	"hola anyways"
	hex(9)+hex(1)
	oct(-1)-oct(7)
	10*hex(A)+oct(12)-0.1
#doble enter

if True:
	b=True
	if b:
		x="hola anyways"
		y=hex(9)+hex(1)
		z=oct(-1)-oct(7)
		w=10*hex(A)+oct(12)-0.1
		x
		y
		z
		w
#doble enter

if True:
	hex(A)>hex(9)
	oct(6)<oct(1)
	1<=1
	hex(B)>=hex(A)
	oct(45)==oct(45)
	5!=5
	hex(F)==15
#doble enter	
			

0.1+10-hex(A)*oct(12)/5+s(0)-p(11)

if True and not(False or False):
	len("this"+"was"+"not"+"worth"+"the"+"time")
#doble enter

def areaCirculo(radio):
	return 3.14*radio*radio
#doble enter
areaCirculo(2)

def fact(n,m):
	if m==1:
		return n
	else:
		return fact(n*m,m-1)

fact(1,5)

for i in range(5):
	i+1

# doble enter aqui
def esPar(n):
	return n%2==0
#doble enter aquí
for i in [1,2,3,4,5]: # el for de PITON itera asignando al iterador los valores de una lista
	esPar(i)

x=1
#enter
x
#enter
x=5
#enter

def x(z):
	y=z
	y=y+1
	return y
#doble enter

x(5)

if 5:
	1

5<"hola"

5+True

class A:
	x=1
	def __init__(self,f):
		self.x=2+f
	def setX(self,x):
		print(self.getX())
		self.x=x
	def getX(self):
		return self.x
#doble enter aqui
class B(A):
	x=1
	def setX(self,x):
		super().setX(x)
	def getX(self):
		return self.x
#doble enter aqui
o = B(6)
#enter
o.setX()
# PITON imprimirá 1, pues el es el valor de la x del objeto de clase B. Esto es despacho dinámico. Esto sucede porque los métodos se ejecutan sobre un ambiente cuya cabecera tiene los elementos self y super ya registrados, y no cambian incluso si el método a ejecutar se encuentra en la clase padre, como en el ejemplo, que se llama a través de la palabra reservada "super()"
